name: Build you-get.exe

on:
  workflow_dispatch:
    inputs:
      you_get_tag:
        description: "Tag name of the target you-get version (e.g. 'v0.4.1743')"
        required: true
        default: "develop"
        type: string
      poetry_version:
        description: "Set the version of Poetry to use"
        required: true
        default: "1.8.5"
        type: string
      main_python_version:
        description: "Select a Python version for the main release"
        required: true
        default: "3.12"
        type: string

jobs:
  build:
    name: "Bundle you-get for Windows"
    runs-on: windows-latest
    strategy:
      matrix:
        python-version: ["3.8", "3.9", "3.10", "3.11", "3.12", "3.13"]
        arch: ["x86", "x64"]

    steps:
      - uses: actions/checkout@v4
        with:
          submodules: false

      - name: "Checkout submodule `you-get` to a specific commit"
        # https://github.com/actions/checkout/issues/503
        run: |
          git submodule update --init --recursive
          cd build/you-get
          git checkout ${{ inputs.you_get_tag }}

      - name: "Setup Python ${{ matrix.python-version }}"
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
          architecture: ${{ matrix.arch }}
          # Do NOT use cache here to avoid PyInstaller selecting the wrong python architecture
          # cache: "poetry"

      # https://github.com/actions/setup-python/issues/967#issuecomment-2461381640
      - name: "Install pipx"
        run: python -m pip install --user pipx
      - name: "Ensure pipx uses the correct Python"
        run: python -m pipx ensurepath

      - name: Install poetry
        # https://github.com/actions/setup-python/blob/e9d6f990972a57673cdb72ec29e19d42ba28880f/docs/advanced-usage.md?plain=1#L309-L321
        run: pipx install poetry==${{ inputs.poetry_version }}

      - name: "Build you-get.exe"
        run: |
          poetry install --no-interaction --no-root
          poetry run python build.py --ci

      - uses: actions/upload-artifact@v4
        with:
          name: you-get_py${{ matrix.python-version }}_${{ matrix.arch }}
          path: |
            dist/*.zip
            dist/artifact_info.json

  release:
    name: "Create release"
    runs-on: ubuntu-latest
    needs: build

    steps:
      - uses: actions/checkout@v4

      - uses: actions/download-artifact@v4
        with:
          path: .ci

      - name: "Prepare for release"
        id: prepare
        env:
          PYTHONPATH: .
        run: |
          echo "date=$(date '+%y%m%d')" >> "$GITHUB_OUTPUT"
          python scripts/ci/main.py --poetry ${{ inputs.poetry_version }} --main ${{ inputs.main_python_version }}

      - name: "Release"
        uses: softprops/action-gh-release@v2
        with:
          files: .ci/**/*.zip
          # draft: true
          name: Unofficial Build ${{ steps.prepare.outputs.date }} for ${{ inputs.you_get_tag }}
          body_path: scripts/ci/release_notes.md
